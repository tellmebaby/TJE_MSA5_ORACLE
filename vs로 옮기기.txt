--1. system 계정에 접속하는 sql
conn system/123456

--2. ALL_USERS 테이블에서 USERNAME 이라는 컬러이 'HR'인 USER_ID와 USERNAME을 조회하시오.
-- > HR 계정이 있는지 확인하시오.
SELECT *
FROM all_users
WHERE username ='HR';

-- 계정 잠금 해제 (계정이 있을 경우)
ALTER USER HR ACCOUNT UNLOCK;

-- 계정 생성 (계정이 없을 경우)
-- c## 없이 계정 생성
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
-- CREATE USER 계정명 IDENTIFIED BY 비밀번호;
CREATE USER HR IDENTIFIED BY 123456;
-- 테이블 스페이스 변경
ALTER USER HR DEFAULT TABLESPACE users;
-- 계정이 사용할 수 있는 용량 설정 (무한대)
ALTER USER HR QUOTA UNLIMITED ON users;
-- 계정에 권한 부여 
GRANT connect, resource TO HR;
-- 계정 삭제 하고 싶을 때
DROP USER HR CASCADE;

--3.  테이블 EMPLOYEES 구조를 조회하는 SQL 문을 작성하시오.
desc employees;

--3.1 테이블 EMPLOYEES 에서 EMPLOYEE_ID, FIRST_NAME 를 조회하는 SQL 문을 작성하시오.
select employee_id, first_name
from employees;

--4. 테이블 employees에 컬럼명을 한글로 변경하시오.
select employee_id AS 사원번호
    ,first_name AS 이름
    ,last_name AS 성
    ,phone_number AS 전화번호
    ,hire_date AS 입사시기
    ,salary AS 월급
FROM employees;

-- 왜 변경이 안 돼. 몰라
select * from employees;

--5. 테이블 EMPLOYEES 의 JOB_ID를 중복된 데이터를 제거하고 조회하는 SQL 문을 작성하시오.
select distinct job_id  --distinct 중복 제거
FROM employees;

--6. 테이블 EMPLOYEES 의 SALARY(급여)가 6000을 초과하는 사원의 모든 컬럼을 조회하는 SQL 문을 작성하시오.
select * 
from employees
where salary >6000;

--7. 테이블 EMPLOYEES 의 SALARY(급여)가 10000인 사원의 모든 컬럼을 조회하는 SQL 문을 작성하시오.
select * 
from employees
where salary = 10000;

--8. 테이블 EMPLOYEES 의 모든 속성들을 SALARY 를 기준으로 내림차순 정렬하고
--   FIRST_NAME 을 기준으로 오름차순 정렬하여 조회하는 SQL 문을 작성하시오.
-- 명령어: ORDER BY 컬럼 [ASC/DESC]; 오름/내림
select *
from employees
order by salary desc, first_name asc;

--9. 테이블 EMPLOYEES 의 JOB_ID가 ‘FI_ACCOUNT’ 이거나 ‘IT_PROG’ 인 사원의 모든 컬럼
--   조회하는 SQL 문을 작성하시오.
SELECT *
FROM employees
WHERE JOB_ID = 'FI_ACCOUNT'
OR JOB_ID = 'IT_PROG';

--10. 테이블 EMPLOYEES 의 JOB_ID가 ‘FI_ACCOUNT’ 이거나 ‘IT_PROG’ 인 사원의 모든 컬럼
--    을조회하는 SQL 문을 작성하시오.
-- in 키워드를 사용하여 sql 쿼리 작성
SELECT *
FROM employees
WHERE JOB_ID IN ('FI_ACCOUNT','IT_PROG');


--11. 테이블 EMPLOYEES 의 JOB_ID가 ‘FI_ACCOUNT’ 이거나 ‘IT_PROG’ 아닌 
--   사원의 모든 컬럼을 조회하는 SQL 문을 작성하시오.
SELECT *
FROM employees
WHERE JOB_ID NOT IN ('FI_ACCOUNT','IT_PROG');


--12. 테이블 EMPLOYEES 의 JOB_ID가 ‘IT_PROG’ 이면서 SALARY 가 6000 이상인 
--   사원의 모든 컬럼을 조회하는 SQL 문을 작성하시오. 
SELECT *
FROM employees
WHERE JOB_ID IN 'IT_PROG'
AND SALARY>=6000;


--13. 테이블 EMPLOYEES 의 FIRST_NAME 이 ‘S’로 시작하는 사원의 모든 컬럼을 조회하는 SQL 문
-- LIKE 사용 -> '_' 한 글자 대체, '%' 여러 글자 대체
SELECT *
FROM employees
WHERE FIRST_NAME LIKE 'S%';


--14. 테이블 EMPLOYEES 의 FIRST_NAME 이 ‘s’로 끝나는 사원의 모든 컬럼을 조회하는 SQL 문
SELECT *
FROM employees
WHERE FIRST_NAME LIKE '%s';

--15. 테이블 EMPLOYEES 의 FIRST_NAME 에 ‘s’가 포함되는 사원의 모든 컬럼
SELECT *
FROM employees
WHERE FIRST_NAME LIKE '%s%';

--16. 테이블 EMPLOYEES 의 FIRST_NAME 이 5글자인 사원의 모든 컬럼을 조회하는 SQL 문
SELECT *
FROM employees
WHERE first_name like '_____';
-- Length(fist_name) = 5; 둘중 하나


--17. 테이블 EMPLOYEES 의 COMMISSION_PCT가 NULL 인 사원의 모든 컬럼을 조회하는 SQL 문
select *
from employees
where commission_pct is null;


--18. 테이블 EMPLOYEES 의 COMMISSION_PCT가 NULL이 아닌 사원의 모든 컬럼을 조회하는 SQL 문
select *
from employees
where COMMISSION_PCT is not null;


--19. 테이블 EMPLOYEES 의 사원의 HIRE_DATE가 04년 이상인 모든 컬럼을 조회하는 SQL 문
-- 날짜 데이터에 맞는 처리:  to_date(04/mmm/01 )
select *
from employees
where hire_date >= to_date('04/01/01','YY/MM/DD');

--20. 테이블 EMPLOYEES 의 사원의 HIRE_DATE가 04년도부터 05년도인 모든 컬럼을 조회하는 SQL 문
select *
from employees
where hire_date >= '01/JAN/04'
AND HIRE_DATE <= '31/DEC/05';

SELECT *
FROM EMPLOYEES
WHERE HIRE_DATE >= TO_DATE('04/01/01','YY.MM/DD')
AND  HIRE_DATE <= TO_DATE('05/12/31','YY.MM/DD');

--21. 12.45, -12.45 보다 크거나 같은 정수 중 제일 작은 수를 계산하는 SQL 문


--22. 12.55와 -12.55 보다 작거나 같은 정수 중 가장 큰 수를 계산하는 SQL 문


--23. 각 소문제에 제시된 수와 자리 수를 이용하여 반올림하는 SQL문을 작성하시오.
-- 0.54 를 소수점 아래 첫째 자리에서 반올림하시오. → 결과 : 1
-- 0.54 를 소수점 아래 둘째 자리에서 반올림하시오. → 결과 : 0.5
-- 125.67 을 일의 자리에서 반올림하시오. → 결과 : 130
-- 125.67 을 십의 자리에서 반올림하시오. → 결과 : 120

--24.


--25.